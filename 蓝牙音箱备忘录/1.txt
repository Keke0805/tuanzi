Alarminfo_Time::Alarminfo_Time(int Hours,int Minute,int Hours24,lv_obj_t* parent)
{
	char buff_s[6]={0};
	char buff[512]={0};
	int apmStatus =0,i=0;
	
	if(Hours24 ==24)
		Type24Time =true;
	else
	{
		if(Hours>12)
		{
			Hours -=13;
			apmStatus =1;
		}
		else if(Hours ==0)
		{
			Hours =11;
		}
		else if(Hours ==12)
		{
			Hours =11;
			apmStatus =1;
		}
		else
		{
			Hours --;
		}
	}
    alarm_frame_label = new LvcppScreen(parent);
    alarm_frame_label->set_size(SCREEN_HOR_SIZE,SCREEN_VER_SIZE);
    alarm_frame_label->align(LV_ALIGN_TOP_MID,0,0);
    alarm_frame_label->set_main_bg_color(lv_color_black(),LV_OPA_60);
    alarmscreen = alarm_frame_label->myobj;

    alarm_info = new LvcppButton(alarmscreen);
    alarm_info->set_size(650,280);
    alarm_info->center_align();
    alarm_info->set_main_pad_all(0);
    alarm_info->set_main_bg_color(lv_color_hex(0xffffff),LV_OPA_100);
    alarm_info->set_style_radius(10,0);
    alarm_info->clear_flag(LV_OBJ_FLAG_CLICKABLE);
    alarm_info_frame = alarm_info->myobj;

    cancel = new LvcppButton(alarm_info_frame);
    cancel->set_size(300,50);
    cancel->set_main_pad_all(0);
    cancel->align(LV_ALIGN_TOP_LEFT,10,210);
    cancel->set_main_bg_color(lv_color_hex(0x00a7d4),LV_OPA_100);
    cancel->set_style_radius(10,0);
    cancel->txt_font_size(32, FT_FONT_STYLE_NORMAL);
    cancel->add_txt(STR_CANCEL);
    cancel->txt_center();

    confirm = new LvcppButton(alarm_info_frame);
    confirm->set_size(300,50);
    confirm->align(LV_ALIGN_TOP_RIGHT,-10,210);
    confirm->set_main_bg_color(lv_color_hex(0x00a7d4),LV_OPA_100);
    confirm->set_style_radius(10,0);
    confirm->txt_font_size(32, FT_FONT_STYLE_NORMAL);
    confirm->add_txt(STR_OK);
    confirm->txt_center();删除全部删除这句
这段代码是一个构造函数，用于创建一个闹钟信息的界面。它接受几个参数，包括小时数、分钟数、24小时制/12小时制等信息，以及一个父对象指针。

首先，它根据小时数和12/24小时制的设置来计算出显示的小时数和上午/下午状态。如果是24小时制，则直接使用传入的小时数；如果是12小时制，则需要根据小时数计算出显示的小时数和上午/下午状态。

接下来，它创建了一个名为alarm_frame_label的LvcppScreen对象，作为整个闹钟信息界面的容器。它设置了该对象的大小、对齐方式、背景颜色等属性，并将其添加到了父对象中。然后，它创建了一个名为alarm_info的LvcppButton对象，作为闹钟信息的显示区域。它设置了该对象的大小、对齐方式、背景颜色、圆角等属性，并将其添加到了alarm_frame_label对象中。

接下来，它创建了两个名为cancel和confirm的LvcppButton对象，作为取消和确认按钮。它们分别设置了大小、对齐方式、背景颜色、圆角、字体大小、文本内容等属性，并将它们添加到了alarm_info对象中。

总的来说，这段代码的作用是创建一个闹钟信息的界面，包括显示闹钟时间的区域和取消/确认按钮。它使用了一些自定义的UI控件，如LvcppScreen和LvcppButton，并设置了它们的属性。

复制
Me：if(!Type24Time)
	{
	    roller1 = new LvcppRoller(alarm_info_frame);
	    roller1->set_size(80,50);
	    roller1->align(LV_ALIGN_TOP_LEFT,100,50);
	    roller1->set_main_bg_color(lv_color_hex(0xffffff),LV_OPA_0);
		memset(buff,0,sizeof(buff));
		sprintf(buff,"%s\n%s",STR_AM,STR_PM);
	    roller1->set_options(buff,0);
	    roller1->set_main_border(0,lv_color_hex(0xffffff),LV_OPA_0);
	    roller1->set_visible_row_count(3);
		roller1->set_selected(apmStatus,LV_ANIM_OFF);
	}

    roller2 = new LvcppRoller(alarm_info_frame);
    roller2->set_size(80,50);
	roller2->set_main_bg_color(lv_color_hex(0xffffff),LV_OPA_0);
	if(!Type24Time)
	{
    	roller2->align(LV_ALIGN_TOP_LEFT,280,50);
		memset(buff,0,sizeof(buff));
		for(i=0;i<12;i++)
		{
			memset(buff_s,0,sizeof(buff_s));
			if(i==0)
				sprintf(buff_s,"%.2d",i+1);
			else
				sprintf(buff_s,"\n%.2d",i+1);
			strcat(buff,buff_s);
		}
	}
	else
	{
		roller2->align(LV_ALIGN_TOP_LEFT,195,50);
		memset(buff,0,sizeof(buff));
		for(i=0;i<24;i++)
		{
			memset(buff_s,0,sizeof(buff_s));
			if(i==0)
				sprintf(buff_s,"%.2d",i);
			else
				sprintf(buff_s,"\n%.2d",i);
			strcat(buff,buff_s);
		}
	}
	roller2->set_options(buff,0);
    roller2->set_main_border(0,lv_color_hex(0xffffff),LV_OPA_0);
    roller2->set_visible_row_count(3);
	roller2->set_selected(Hours,LV_ANIM_OFF);

    roller3 = new LvcppRoller(alarm_info_frame);
    roller3->set_size(80,50);
	if(!Type24Time)
    	roller3->align(LV_ALIGN_TOP_LEFT,460,50);
	else
		roller3->align(LV_ALIGN_TOP_LEFT,375,50);
    roller3->set_main_bg_color(lv_color_hex(0xffffff),LV_OPA_0);
	memset(buff,0,sizeof(buff));
	for(i=0;i<60;i++)
	{
		memset(buff_s,0,sizeof(buff_s));
		if(i==0)
			sprintf(buff_s,"%.2d",i);
		else
			sprintf(buff_s,"\n%.2d",i);
		strcat(buff,buff_s);
	}
    roller3->set_options(buff,0);
    roller3->set_main_border(0,lv_color_hex(0xffffff),LV_OPA_0);
    roller3->set_visible_row_count(3);
	roller3->set_selected(Minute,LV_ANIM_OFF);
}

int Alarminfo_Time::get_info(void)
{
    int timeSet =0;

    roller2->get_selected_str(hour, 8);
    roller3->get_selected_str(minute, 8);
	if(!Type24Time)
	{
		roller1->get_selected_str(apm, 8);
		if(strcmp(apm,STR_PM)==0)
		{
            if(atoi(hour) ==12)
                timeSet =(int)(atoi(hour)*100 + atoi(minute));
            else
                timeSet =(int)((atoi(hour)+12)*100 + atoi(minute));
        }
        else
        {
            if(atoi(hour) ==12)
                timeSet =(int)(atoi(minute));
            else
                timeSet =(int)(atoi(hour)*100 + atoi(minute));
        }
	}
	else
		timeSet =(int)(atoi(hour)*100 + atoi(minute));
    return timeSet;
}删除全部删除这句
这段代码是闹钟信息界面的一部分，用于创建并操作三个滚轮控件来设置闹钟的时间。它首先根据12/24小时制的设置来创建第一个滚轮控件，用于选择上午/下午状态。如果是24小时制，则不需要该控件。它设置了该控件的大小、位置、选项、边框等属性，并将其添加到了alarm_info_frame对象中。然后，它创建了另外两个滚轮控件，用于选择小时数和分钟数。它们分别设置了大小、位置、选项、边框等属性，并将它们添加到了alarm_info_frame对象中。

接下来，它实现了一个名为get_info的函数，用于获取用户设置的闹钟时间。它首先调用get_selected_str函数获取滚轮控件中当前选中的小时数和分钟数，并将它们保存到名为hour和minute的字符串变量中。如果是12小时制，则还需要获取上午/下午状态，并将其保存到名为apm的字符串变量中。然后，它根据12/24小时制的设置计算出闹钟时间，并将其返回。

总的来说，这段代码的作用是创建并操作三个滚轮控件来设置闹钟的时间，并提供一个函数用于获取用户设置的闹钟时间。

复制
Me：void Alarminfo_Time::Alarminfo_Time_delete(void)
{
    if(roller3 != nullptr)
    {
        delete roller3;
        roller3= nullptr;
    }

    if(roller2 != nullptr)
    {
        delete roller2;
        roller2= nullptr;
    }
  	if(!Type24Time)
  	{
	    if(roller1 != nullptr)
	    {
	        delete roller1;
	        roller1= nullptr;
	    }
  	}
    if(confirm != nullptr)
    {
        delete confirm;
        confirm= nullptr;
    }

    if(cancel != nullptr)
    {
        delete cancel;
        cancel= nullptr;
    }

    if(alarm_info != nullptr)
    {
        delete alarm_info;
        alarm_info= nullptr;
    }

    if(alarm_frame_label != nullptr)
    {
        delete alarm_frame_label;
        alarm_frame_label= nullptr;
    }

}

Alarminfo_Time::~Alarminfo_Time(void)
{
    if(roller3 != nullptr)
    {
        delete roller3;
        roller3= nullptr;
    }

    if(roller2 != nullptr)
    {
        delete roller2;
        roller2= nullptr;
    }

    if(roller1 != nullptr)
    {
        delete roller1;
        roller1= nullptr;
    }

    if(confirm != nullptr)
    {
        delete confirm;
        confirm= nullptr;
    }

    if(cancel != nullptr)
    {
        delete cancel;
        cancel= nullptr;
    }

    if(alarm_info != nullptr)
    {
        delete alarm_info;
        alarm_info= nullptr;
    }

    if(alarm_frame_label != nullptr)
    {
        delete alarm_frame_label;
        alarm_frame_label= nullptr;
    }

}

删除全部删除这句
这段代码是闹钟信息界面的一部分，包括一个析构函数和一个名为Alarminfo_Time_delete的函数。它们的作用都是删除界面中创建的各种控件，释放内存。

具体来说，Alarminfo_Time_delete函数首先检查每个控件是否存在，如果存在则删除它们，并将指针设置为nullptr。这个函数的作用是在界面不再需要时手动释放内存。

析构函数~Alarminfo_Time与Alarminfo_Time_delete函数类似，也是用于释放内存的。在对象被销毁时，析构函数会自动调用，它也会检查每个控件是否存在，如果存在则删除它们，并将指针设置为nullptr。这个函数的作用是在对象被销毁时自动释放内存，避免内存泄漏。

总的来说，这段代码的作用是在闹钟信息界面不再需要时，手动或自动释放界面中创建的各种控件，释放内存。